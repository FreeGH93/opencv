# https://github.com/marketplace/actions/run-on-architecture
# https://github.com/openpnp/opencv/pull/56
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
# https://github.com/openpnp/opencv/actions
# https://github.com/openpnp/opencv/pull/59/files
# https://stackoverflow.com/questions/57498605/github-actions-share-workspace-artifacts-between-jobs?rq=1
# https://github.com/actions/upload-artifact
# https://github.com/actions/download-artifact

# TODO
# - only run on tags
# - extract opencv version from pom.xml for use in this action
# - The final test should be running the tests with the fully built
#   jar on the various platforms. This will ensure that, for instance,
#   there is not a shared library being referenced in one env. that isn't
#   in another.

name: Build OpenPnP OpenCV Distribution

on: 
  push:
  pull_request:

env:
  OPENCV_VERSION: 4.5.1
  OPENCV_VERSION_SHORT: 451
  POM_VERSION: 4.5.1-0

jobs:
  build_arm64: 
    runs-on: ubuntu-18.04
    steps:
      - name: Run on Arm64
        uses: uraimo/run-on-arch-action@v2.0.9
        with:
          arch: aarch64
          distro: ubuntu18.04
          run: |
            apt-get update -q -y
            apt-get install -q -y git wget cmake unzip build-essential openjdk-8-jdk
            java --version
            wget https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip > /dev/null
            unzip ${{ env.OPENCV_VERSION }} > /dev/null
            cd opencv-${{ env.OPENCV_VERSION }}
            mkdir build
            cd build
            cmake \
              -D BUILD_TESTING=OFF \
              -D BUILD_TESTING_SHARED=OFF \
              -D BUILD_TESTING_STATIC=OFF \
              -D OPENCV_GENERATE_PKGCONFIG=ON \
              -D BUILD_EXAMPLES=OFF \
              -D BUILD_DOCS=OFF \
              -D BUILD_FAT_JAVA_LIB=ON \
              -D BUILD_JAVA=ON \
              -D OPENCV_ENABLE_NONFREE=ON \
              -D CMAKE_BUILD_TYPE=RELEASE \
              -D BUILD_SHARED_LIBS=OFF ..
            make -j8
            find . -name libopencv_java*

  # # Build native libraries for Linux and Mac. Uploads the libraries
  # # as artifacts which are used in subsequent jobs.
  # build_libs:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-18.04, macos-10.15]
  #       java: [8]

  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v2

  #     - name: Setup JDK ${{ matrix.java }}
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: ${{ matrix.java }}

  #     - name: Build OpenCV
  #       run: |
  #         wget https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip > /dev/null
  #         unzip ${{ env.OPENCV_VERSION }} > /dev/null
  #         cd opencv-${{ env.OPENCV_VERSION }}
  #         mkdir build
  #         cd build
  #         cmake \
  #           -D BUILD_TESTING=OFF \
  #           -D BUILD_TESTING_SHARED=OFF \
  #           -D BUILD_TESTING_STATIC=OFF \
  #           -D OPENCV_GENERATE_PKGCONFIG=ON \
  #           -D BUILD_EXAMPLES=OFF \
  #           -D BUILD_DOCS=OFF \
  #           -D BUILD_FAT_JAVA_LIB=ON \
  #           -D BUILD_JAVA=ON \
  #           -D OPENCV_ENABLE_NONFREE=ON \
  #           -D CMAKE_BUILD_TYPE=RELEASE \
  #           -D BUILD_SHARED_LIBS=OFF ..
  #         make -j8

  #     - name: Copy Libraries
  #       run: |
  #         cp opencv-${{ env.OPENCV_VERSION }}/build/bin/opencv-${{ env.OPENCV_VERSION_SHORT }}.jar upstream || :
  #         cp opencv-${{ env.OPENCV_VERSION }}/build/lib/libopencv_java${{ env.OPENCV_VERSION_SHORT }}.so src/main/resources/nu/pattern/opencv/linux/x86_64 || :
  #         cp opencv-${{ env.OPENCV_VERSION }}/build/lib/libopencv_java${{ env.OPENCV_VERSION_SHORT }}.dylib src/main/resources/nu/pattern/opencv/osx/x86_64 || :

  #     - name: Build with Maven
  #       run: mvn -B test

  #     - name: Upload Libraries
  #       uses: actions/upload-artifact@v2
  #       with: 
  #         name: ${{ matrix.os }}
  #         path: |
  #           opencv-${{ env.OPENCV_VERSION }}/build/bin/opencv-${{ env.OPENCV_VERSION_SHORT }}.jar
  #           opencv-${{ env.OPENCV_VERSION }}/build/lib/libopencv_java${{ env.OPENCV_VERSION_SHORT }}.so
  #           opencv-${{ env.OPENCV_VERSION }}/build/lib/libopencv_java${{ env.OPENCV_VERSION_SHORT }}.dylib

  # # Downloads the Windows distribution from OpenCV, extracts it and uploads
  # # the native libraries as artifacts for use by subsequent jobs. This is
  # # in leiu of building the native libraries on Windows.
  # extract_windows:
  #   runs-on: ubuntu-18.04

  #   steps:
  #     - name: Download Windows Distribution
  #       run: wget -O opencv-${{ env.OPENCV_VERSION }}-vc14_vc15.exe https://sourceforge.net/projects/opencvlibrary/files/${{ env.OPENCV_VERSION }}/opencv-${{ env.OPENCV_VERSION }}-vc14_vc15.exe/download

  #     - name: Extract Windows Distribution
  #       run: 7z x opencv-${{ env.OPENCV_VERSION }}-vc14_vc15.exe
          
  #     - name: Upload Libraries
  #       uses: actions/upload-artifact@v2
  #       with: 
  #         name: windows-2016
  #         path: opencv/build/java

  # # Download and combine the artifacts from the above jobs and build the
  # # distribution jar. Uploads it as an artifact for subsequent steps.
  # build:
  #   needs: [build_libs, extract_windows]
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-18.04]
  #       java: [8]

  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v2

  #     - name: Setup JDK ${{ matrix.java }}
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: ${{ matrix.java }}

  #     - name: Download Libraries
  #       uses: actions/download-artifact@v2

  #     - name: Copy Binaries
  #       run: |
  #         cp macos-10.15/bin/opencv-${{ env.OPENCV_VERSION_SHORT }}.jar upstream
  #         cp macos-10.15/lib/libopencv_java${{ env.OPENCV_VERSION_SHORT }}.dylib src/main/resources/nu/pattern/opencv/osx/x86_64
  #         cp ubuntu-18.04/lib/libopencv_java${{ env.OPENCV_VERSION_SHORT }}.so src/main/resources/nu/pattern/opencv/linux/x86_64
  #         cp windows-2016/x86/opencv_java${{ env.OPENCV_VERSION_SHORT }}.dll src/main/resources/nu/pattern/opencv/windows/x86_32
  #         cp windows-2016/x64/opencv_java${{ env.OPENCV_VERSION_SHORT }}.dll src/main/resources/nu/pattern/opencv/windows/x86_64

  #     - name: Build with Maven
  #       run: mvn -B install

  #     - name: Upload Distribution
  #       uses: actions/upload-artifact@v2
  #       with: 
  #         name: dist
  #         path: target/opencv*

  # # Downloads the distribution jar that was build above and runs
  # # a short smoke test on it on many platforms and versions of
  # # Java. This is intended to ensure that the built jar
  # # runs on all of the supported targets.
  # test:
  #   needs: build
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [macos-10.15, windows-2016, windows-2019, ubuntu-20.04, ubuntu-18.04]
  #       java: [8, 9, 10, 11, 12, 13, 14, 15]

  #   steps:
  #     - name: Setup JDK ${{ matrix.java }}
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: ${{ matrix.java }}

  #     - name: Download Distribution
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: dist

  #     - name: Run Test
  #       run: java -cp opencv-${{ env.POM_VERSION }}.jar nu.pattern.PrintVersion

  # distribute:
  #   needs: test
  #   runs-on: ubuntu-18.04
